class Solution:       
    def exist(self, board: List[List[str]], word: str) -> bool:
            if not board:
                return False

            def DFS(x, y, ind, trav):

                if ind==len(word)-1:
                    return True

                trav.add((x, y))
                for a, b in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                    nx, ny = x+a, y+b
                    if 0<=nx<len(board) and 0<=ny<len(board[nx]) and (nx, ny) not in trav and word[ind+1]==board[nx][ny]:
                        if DFS(nx, ny, ind+1, trav):
                            return True
                trav.remove((x, y))

                return False



            for i in range(len(board)):
                for j in range(len(board[i])):
                    if board[i][j]==word[0]:
                        if DFS(i, j, 0, set()):
                            return True
            return False
    
    
        
        
